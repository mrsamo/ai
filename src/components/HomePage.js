import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { Link } from 'react-router-dom';
import './Page.css';
import './HomePage.css';

const HomePage = () => {
  const [prompts, setPrompts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [promptText, setPromptText] = useState('');
  const [isListening, setIsListening] = useState(false);

  // New prompts data - memoized to prevent re-creation on every render
  const examplePrompts = useMemo(() => [
    {
      id: 1,
      image: 'https://placehold.co/400x300/16a34a/white?text=–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê+–†–ê–°–¢–ï–ù–ò–ô',
      text: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ–ª–µ–∑–Ω–µ–π —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ —Ñ–æ—Ç–æ',
      author: '–°–∞–¥–æ–≤–æ–¥ –ò–≤–∞–Ω',
      height: 'tall'
    },
    {
      id: 2,
      image: 'https://placehold.co/400x300/991b1b/white?text=–ñ–ê–õ–û–ë–´+–ò+–ó–ê–Ø–í–õ–ï–ù–ò–Ø',
      text: '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–± –∏ –∑–∞—è–≤–ª–µ–Ω–∏–π –≤ #–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
      author: '–Æ—Ä–∏—Å—Ç –ê–Ω–Ω–∞',
      height: 'medium'
    },
    {
      id: 3,
      image: 'https://placehold.co/400x300/0284c7/white?text=–î–û–ú–ê–®–ù–ò–ï+–ó–ê–î–ê–ù–ò–Ø',
      text: '–ü–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–æ #–ø—Ä–µ–¥–º–µ—Ç',
      author: '–£—á–∏—Ç–µ–ª—å –ú–∞—Ä–∏—è',
      height: 'tall'
    },
    {
      id: 4,
      image: 'https://placehold.co/400x300/ea580c/white?text=–†–ï–ú–û–ù–¢+–¢–ï–•–ù–ò–ö–ò',
      text: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª–æ–º–∫–∏ #—Ç–µ—Ö–Ω–∏–∫–∞ –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º',
      author: '–ú–∞—Å—Ç–µ—Ä –°–µ—Ä–≥–µ–π',
      height: 'medium'
    },
    {
      id: 5,
      image: 'https://placehold.co/400x300/047857/white?text=–°–ï–ú–ï–ô–ù–´–ô+–ë–Æ–î–ñ–ï–¢',
      text: '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–µ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ #–ø–µ—Ä–∏–æ–¥',
      author: '–§–∏–Ω–∞–Ω—Å–∏—Å—Ç –ê–ª–µ–∫—Å–µ–π',
      height: 'short'
    },
    {
      id: 6,
      image: 'https://placehold.co/400x300/65a30d/white?text=–î–ê–ß–ù–´–ô+–ö–ê–õ–ï–ù–î–ê–†–¨',
      text: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–∞—á–Ω—ã—Ö —Ä–∞–±–æ—Ç –¥–ª—è #—Ä–µ–≥–∏–æ–Ω',
      author: '–ê–≥—Ä–æ–Ω–æ–º –ü–µ—Ç—Ä',
      height: 'tall'
    },
    {
      id: 7,
      image: 'https://placehold.co/400x300/dc2626/white?text=–ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï+–ê–ù–ê–õ–ò–ó–´',
      text: '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º',
      author: '–î–æ–∫—Ç–æ—Ä –ï–ª–µ–Ω–∞',
      height: 'medium'
    },
    {
      id: 8,
      image: 'https://placehold.co/400x300/9333ea/white?text=–ü–û–î–ë–û–†+–û–î–ï–ñ–î–´',
      text: '–ü–æ–¥–±–æ—Ä #—Ç–∏–ø_–æ–¥–µ–∂–¥—ã –ø–æ —Ñ–æ—Ç–æ —Ñ–∏–≥—É—Ä—ã –∏ —Å—Ç–∏–ª—é',
      author: '–°—Ç–∏–ª–∏—Å—Ç –ê–Ω–Ω–∞',
      height: 'medium'
    },
    {
      id: 9,
      image: 'https://placehold.co/400x300/0284c7/white?text=–ü–õ–ê–ù–ò–†–û–í–©–ò–ö+–ü–û–ï–ó–î–û–ö',
      text: '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ #–≥–æ—Ä–æ–¥ –Ω–∞ #–¥–Ω–∏',
      author: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –ú–∞–∫—Å–∏–º',
      height: 'short'
    },
    {
      id: 10,
      image: 'https://placehold.co/400x300/6d28d9/white?text=–í–´–ë–û–†+–¢–ï–•–ù–ò–ö–ò',
      text: '–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤—ã–±–æ—Ä—É #—Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –¥–æ–º–∞',
      author: '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ò–≥–æ—Ä—å',
      height: 'medium'
    },
    {
      id: 11,
      image: 'https://placehold.co/400x300/ea580c/white?text=–°–û–°–¢–ê–í–õ–ï–ù–ò–ï+–†–ï–ó–Æ–ú–ï',
      text: '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –¥–ª—è #–ø—Ä–æ—Ñ–µ—Å—Å–∏—è',
      author: 'HR-—ç–∫—Å–ø–µ—Ä—Ç –û–ª—å–≥–∞',
      height: 'tall'
    },
    {
      id: 12,
      image: 'https://placehold.co/300x200/FF6B6B/FFFFFF?text=AI+Art',
      text: '–°–æ–∑–¥–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –¥–µ–≤—É—à–∫–∏ –≤ —Å—Ç–∏–ª–µ —Ä–µ–Ω–µ—Å—Å–∞–Ω—Å —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏',
      author: 'ArtMaster',
      height: 'short'
    }
  ], []);

  // Shuffle array function
  const shuffleArray = (array) => {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  };

  // Load initial prompts
  useEffect(() => {
    const initialPrompts = shuffleArray(examplePrompts).slice(0, 12);
    setPrompts(initialPrompts);
  }, [examplePrompts]);

  // Load more prompts function
  const loadMorePrompts = useCallback(async () => {
    if (loading) return;
    
    setLoading(true);
    
    // Mock API call with 300ms delay
    await new Promise(resolve => setTimeout(resolve, 300));
    
    const shuffledPrompts = shuffleArray(examplePrompts);
    const newPrompts = shuffledPrompts.slice(0, 12).map((prompt, index) => ({
      ...prompt,
      id: Date.now() + index // Ensure unique IDs
    }));
    
    setPrompts(prev => [...prev, ...newPrompts]);
    setLoading(false);
  }, [loading, examplePrompts]);

  // Infinite scroll handler
  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = document.documentElement.scrollTop;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.offsetHeight;
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞ 600px –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (scrollTop + windowHeight >= documentHeight - 600 && !loading) {
        loadMorePrompts();
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [loadMorePrompts, loading]);

  // Mock voice input
  const handleVoiceInput = () => {
    setIsListening(!isListening);
    // Mock functionality - in real app would use Web Speech API
    if (!isListening) {
      setTimeout(() => {
        setIsListening(false);
        setPromptText('–°–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞ –≤ –∫–æ—Å–º–æ—Å–µ');
      }, 2000);
    }
  };

  return (
    <div className="homepage">
      {/* Main title */}
      <h1 className="main-title">–ò—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞&nbsp;–ª—é–±–æ–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å.<br/>
–ì–ª–∞–≤–Ω–æ–µ&nbsp;&mdash; –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å. –ú—ã&nbsp;–Ω–∞—É—á–∏–º –∫–∞–∫.</h1>
      
      {/* Examples section */}
      <div className="examples-section">
        <div className="example-item bad-example">
          <div className="example-icon">‚ùå</div>
          <div className="example-content">
            <div className="example-prompt">"–ü–æ–º–æ–≥–∏ —Å –æ–≥—É—Ä—Ü–∞–º–∏"</div>
            <div className="example-arrow">‚Üí</div>
            <div className="example-result">—Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç—ã–π –æ—Ç–≤–µ—Ç</div>
          </div>
        </div>
        
        <div className="example-item good-example">
          <div className="example-icon">‚úÖ</div>
          <div className="example-content">
            <div className="example-prompt">"–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–π –±–æ–ª–µ–∑–Ω—å –æ–≥—É—Ä—Ü–æ–≤ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: –∂–µ–ª—Ç—ã–µ –ª–∏—Å—Ç—å—è —Å–Ω–∏–∑—É, –ø–æ–ª–∏–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π, –≥—Ä—É–Ω—Ç —Å—É–≥–ª–∏–Ω–æ–∫"</div>
            <div className="example-arrow">‚Üí</div>
            <div className="example-result">—Ç–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ</div>
          </div>
        </div>
        
        <div className="examples-footer">
          <strong>–ú—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –≤ —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞!</strong>
        </div>
      </div>
      
      {/* Top three blocks */}
      <div className="top-blocks">
        <div className="top-block">
          <img src="https://placehold.co/120x80/4ECDC4/FFFFFF?text=üìö" alt="–í–æ–ø—Ä–æ—Å—ã" />
          <span>–í–æ–ø—Ä–æ—Å—ã</span>
        </div>
        <Link to="/community" className="top-block">
          <img src="https://placehold.co/120x80/FF6B6B/FFFFFF?text=üéâ" alt="–ö–æ–º—å—é–Ω–∏—Ç–∏" />
          <span>–ö–æ–º—å—é–Ω–∏—Ç–∏</span>
        </Link>
        <Link to="/learning" className="top-block">
          <img src="https://placehold.co/120x80/45B7D1/FFFFFF?text=‚≠ê" alt="–û–±—É—á–µ–Ω–∏–µ" />
          <span>–û–±—É—á–µ–Ω–∏–µ</span>
        </Link>
      </div>

      {/* Prompt input area */}
      <div className="prompt-input-section">
        <h2>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ</h2>
        <div className="prompt-input-container">
          <input
            type="text"
            value={promptText}
            onChange={(e) => setPromptText(e.target.value)}
            placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å..."
            className="prompt-input"
          />
          <button 
            className={`voice-button ${isListening ? 'listening' : ''}`}
            onClick={handleVoiceInput}
          >
            üé§
          </button>
        </div>
        {isListening && <div className="listening-indicator">–°–ª—É—à–∞—é...</div>}
      </div>

      {/* Prompts feed */}
      <div className="prompts-section">
        <h2>–ü–æ–¥–±–æ—Ä–∫–∞ –¥–ª—è –≤–∞—Å</h2>
        <div className="prompts-grid">
          {prompts.map((prompt) => (
            <Link
              key={prompt.id}
              to={`/prompt/${prompt.id}`}
              className={`prompt-card ${prompt.height}`}
              style={{ textDecoration: 'none', color: 'inherit' }}
            >
              <div className="prompt-image-wrapper">
                <img src={prompt.image} alt="Prompt" className="prompt-image" />
              </div>
              <div className="prompt-content">
                <p className="prompt-text">{prompt.text}</p>
                <Link
                  to={`/user/${prompt.author.replace(/\s+/g, '').toLowerCase()}`}
                  className="prompt-author"
                  onClick={(e) => e.stopPropagation()}
                >
                  @{prompt.author}
                </Link>
              </div>
            </Link>
          ))}
        </div>
        
        {loading && (
          <div className="loading-spinner">
            <div className="spinner"></div>
            <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –µ—â–µ –ø—Ä–æ–º–ø—Ç—ã...</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default HomePage;